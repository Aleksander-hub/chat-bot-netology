import json
from datetime import datetime

TASKS_FILE = "tasks.json"

def save_tasks(tasks):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª tasks.json."""
    with open(TASKS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=4)

def load_tasks():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ tasks.json, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—è –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–¥–∞—á–∏.
    """
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            tasks = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

    today_str = datetime.now().strftime('%Y-%m-%d')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ (—Å–µ–≥–æ–¥–Ω—è –∏ –≤ –±—É–¥—É—â–µ–º)
    actual_tasks = {
        date: task_list for date, task_list in tasks.items() 
        if date >= today_str and task_list
    }

    # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ç.–µ. —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if len(actual_tasks) != len(tasks):
        save_tasks(actual_tasks)
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–¥–∞—á–∏.")

    return actual_tasks

def add_task(date: str, task: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª."""
    if not date or not task:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç."
    
    tasks = load_tasks()
    tasks.setdefault(date, []).append(task)
    save_tasks(tasks)
    
    return f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: [{date}] ‚Äî {task}"

def show_tasks(specific_date: str = None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞, –∑–∞–≥—Ä—É–∂–∞—è –∏—Ö –∏–∑ —Ñ–∞–π–ª–∞."""
    tasks = load_tasks() # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if not tasks:
        return "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç."

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
    if specific_date:
        if specific_date in tasks and tasks[specific_date]:
            task_list = tasks[specific_date]
            formatted_tasks = [f"{i}. {t}" for i, t in enumerate(task_list, 1)]
            return f"–ó–∞–¥–∞—á–∏ –Ω–∞ {specific_date}:\n" + "\n".join(formatted_tasks)
        else:
            return f"–ù–∞ {specific_date} –∑–∞–¥–∞—á –Ω–µ—Ç."

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    all_tasks_parts = []
    today_str = datetime.now().strftime('%Y-%m-%d')

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if today_str in tasks and tasks[today_str]:
        all_tasks_parts.append("--- –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ---")
        today_tasks = [f"  {i}. {t}" for i, t in enumerate(tasks[today_str], 1)]
        all_tasks_parts.append("\n".join(today_tasks))

    # –ó–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
    other_tasks_parts = []
    for date, task_list in sorted(tasks.items()):
        if date == today_str or not task_list:
            continue
        formatted_tasks = [f"  {i}. {t}" for i, t in enumerate(task_list, 1)]
        other_tasks_parts.append(f"{date}:\n" + "\n".join(formatted_tasks))
    
    if other_tasks_parts:
        all_tasks_parts.append("--- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ ---")
        all_tasks_parts.append("\n\n".join(other_tasks_parts))

    if not all_tasks_parts:
        return "–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç."

    return "\n\n".join(all_tasks_parts)

def delete_all_tasks() -> str:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    save_tasks({})
    return "üóëÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã."

def delete_tasks(date: str, task_number: int = None) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω task_number, —É–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É.
    –ò–Ω–∞—á–µ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.
    """
    tasks = load_tasks()

    if date not in tasks:
        return f"–ù–∞ –¥–∞—Ç—É {date} –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É
    if task_number is not None:
        try:
            # –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-based), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (0-based)
            task_index = int(task_number) - 1
            if 0 <= task_index < len(tasks[date]):
                removed_task = tasks[date].pop(task_index)
                # –ï—Å–ª–∏ –Ω–∞ –¥–∞—Ç—É –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á, —É–¥–∞–ª—è–µ–º –∏ —Å–∞–º—É –¥–∞—Ç—É
                if not tasks[date]:
                    del tasks[date]
                save_tasks(tasks)
                return f"‚úÖ –ó–∞–¥–∞—á–∞ '{removed_task}' –Ω–∞ {date} —É–¥–∞–ª–µ–Ω–∞."
            else:
                return f"‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º {task_number} –Ω–∞ {date} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        except (ValueError, TypeError):
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏."
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞—Ç—É
    else:
        del tasks[date]
        save_tasks(tasks)
        return f"üóëÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ {date} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."