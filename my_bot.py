import telebot
import os
from dotenv import load_dotenv
import keyboards as kb
from functions import (
    load_tasks, save_tasks, add_todo,
    get_tasks_string, clear_all_tasks, parse_date
)
# --- Imports for Scheduler ---
import time
import threading
from datetime import datetime, date
import pytz # <-- –ù–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞

load_dotenv()

# --- –¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –∏ —Ç–æ–∫–µ–Ω ---
HELP = """
–Ø - –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ:
- ‚ùì **–ü–æ–º–æ—â—å**: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
- ‚ûï **–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É**: –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.
- üìã **–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏**: –£–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.
- üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –≤—Å–µ**: –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.

–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.
"""
token = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(token)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
ADMIN_ID = "8137874571"
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
last_notification_date = None

tasks = load_tasks()

# --- –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---

def check_tasks_and_notify():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    global last_notification_date

    if ADMIN_ID == "YOUR_TELEGRAM_ID":
        print("–í–Ω–∏–º–∞–Ω–∏–µ: ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–æ—Å–∫–≤—ã
    today_moscow = datetime.now(MOSCOW_TZ).date()
    today_str = today_moscow.strftime('%Y-%m-%d')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    last_notification_date = today_moscow

    current_tasks = load_tasks()
    if today_str in current_tasks and current_tasks[today_str]:
        tasks_today = current_tasks[today_str]
        message = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∏:\n\n"
        for i, task in enumerate(tasks_today, 1):
            message += f"{i}. {task}\n"
        
        try:
            bot.send_message(ADMIN_ID, message)
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ {today_str} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    else:
        print(f"–ù–∞ {today_str} –Ω–µ—Ç –∑–∞–¥–∞—á, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


def run_scheduler():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è —Ä–∞–∑ –≤ —á–∞—Å.
    """
    global last_notification_date
    
    while True:
        now_moscow = datetime.now(MOSCOW_TZ)
        today_moscow = now_moscow.date()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å >= 5 –∏ —á—Ç–æ –º—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        if now_moscow.hour >= 5 and today_moscow != last_notification_date:
            print(f"–í—Ä–µ–º—è {now_moscow.strftime('%H:%M')} –ø–æ –ú–æ—Å–∫–≤–µ, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞—á...")
            check_tasks_and_notify()

        # –ñ–¥–µ–º –æ–¥–∏–Ω —á–∞—Å
        time.sleep(3600)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram ---

def show_main_menu(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
    bot.send_message(chat_id, text, reply_markup=kb.create_main_menu_keyboard(), parse_mode='Markdown')

@bot.message_handler(commands=["start"])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if str(message.chat.id) == str(ADMIN_ID):
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n" + HELP
    else:
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" + HELP
    show_main_menu(message.chat.id, welcome_text)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)

    if call.data == "help":
        show_main_menu(chat_id, HELP)
    elif call.data == "add":
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –î–î.–ú–ú, –ú–ú-–î–î –∏–ª–∏ –ì–ì–ì–ì-–ú–ú-–î–î)")
        bot.register_next_step_handler(msg, process_date_input)
    elif call.data == "show":
        tasks_string = get_tasks_string(tasks)
        bot.send_message(chat_id, tasks_string)
        show_main_menu(chat_id)
    elif call.data == "delete":
        if not tasks:
            bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É–∂–µ –ø—É—Å—Ç.")
        else:
            clear_all_tasks(tasks)
            save_tasks(tasks)
            bot.send_message(chat_id, "–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")
        show_main_menu(chat_id)
    elif call.data.startswith("confirm_yes:"):
        proposed_date = call.data.split(":")[1]
        ask_for_task_text(chat_id, proposed_date)
    elif call.data == "confirm_no":
        bot.send_message(chat_id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
        show_main_menu(chat_id)

def process_date_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É."""
    status, date_str = parse_date(message.text)
    if status == "ok":
        ask_for_task_text(message.chat.id, date_str)
    elif status == "past":
        bot.send_message(
            message.chat.id,
            f"–≠—Ç–∞ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É {date_str}?",
            reply_markup=kb.create_yes_no_keyboard(date_str)
        )
    elif status == "invalid":
        error_text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if date_str == "past_date":
             error_text = "–í—ã —É–∫–∞–∑–∞–ª–∏ —É–∂–µ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É."
        bot.send_message(message.chat.id, error_text)
        show_main_menu(message.chat.id)

def ask_for_task_text(chat_id, date_str):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."""
    msg = bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(msg, process_task, date_str)

def process_task(message, date):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ."""
    task = message.text.strip()
    add_todo(date, task, tasks)
    save_tasks(tasks)
    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: [{date}] ‚Äî {task}")
    show_main_menu(message.chat.id)

@bot.message_handler(content_types=["text"])
def echo(message):
    show_main_menu(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
if __name__ == '__main__':
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å).")
    
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling(none_stop=True)

