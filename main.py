import telebot
import os
import json
from dotenv import load_dotenv
from pydub import AudioSegment

# --- –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
import keyboards as kb
import gemini_ai as ai
from functions import (
    load_tasks, save_tasks, add_todo,
    get_tasks_string, clear_all_tasks
)

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
import time
import threading
from datetime import datetime
import pytz

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()
token = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(token)
tasks = load_tasks()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
HELP = """
–Ø - –≤–∞—à –ª–∏—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. 

**–ß—Ç–æ —è —É–º–µ—é:**
- –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, *"–¥–æ–±–∞–≤—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"*).
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ (*"—á—Ç–æ —É –º–µ–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"*).
- –£–¥–∞–ª—è—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏.
- –ü–æ–º–æ–≥–∞—Ç—å (*"–ø–æ–º–æ—â—å"* –∏–ª–∏ *"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"*).

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.
–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.
"""
ADMIN_ID = "8137874571"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
last_notification_date = None
TEMP_DIR = "temp"
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ ---
def process_command(text, chat_id):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞."""
    bot.send_message(chat_id, "–î—É–º–∞—é... ü§î", disable_notification=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –æ—Ç AI
    intent_json_str = ai.get_intent(text)
    print(f"[AI] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent_json_str}")

    try:
        intent_data = json.loads(intent_json_str)
        intent = intent_data.get("intent", "unknown")

        if intent == "add_task":
            date = intent_data.get("date")
            task = intent_data.get("task")
            if date and task:
                add_todo(date, task, tasks)
                save_tasks(tasks)
                bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: [{date}] ‚Äî {task}")
            else:
                bot.send_message(chat_id, "–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            show_main_menu(chat_id)

        elif intent == "show_tasks":
            tasks_string = get_tasks_string(tasks, intent_data.get("date"))
            bot.send_message(chat_id, tasks_string)
            show_main_menu(chat_id)

        elif intent == "delete_tasks":
            # –ü–æ–∫–∞ —á—Ç–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            clear_all_tasks(tasks)
            save_tasks(tasks)
            bot.send_message(chat_id, "üóëÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")
            show_main_menu(chat_id)

        elif intent == "help":
            show_main_menu(chat_id, HELP)

        else: # unknown intent
            bot.send_message(chat_id, "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.")
            show_main_menu(chat_id)

    except json.JSONDecodeError:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç AI: {intent_json_str}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        show_main_menu(chat_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram ---
@bot.message_handler(commands=["start"])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!" + HELP
    show_main_menu(message.chat.id, welcome_text)

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = message.chat.id
    try:
        bot.send_message(chat_id, "–ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Ä–∞—Å–ø–æ–∑–Ω–∞—é... üé§", disable_notification=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º oga —Ñ–∞–π–ª
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        oga_path = os.path.join(TEMP_DIR, f"{message.voice.file_id}.oga")
        with open(oga_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav
        wav_path = os.path.join(TEMP_DIR, f"{message.voice.file_id}.wav")
        audio = AudioSegment.from_ogg(oga_path)
        audio.export(wav_path, format="wav")
        print(f"[–ê—É–¥–∏–æ] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {wav_path}")

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        recognized_text = ai.speech_to_text(wav_path)

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.remove(oga_path)
        os.remove(wav_path)

        if recognized_text:
            bot.send_message(chat_id, f"–í—ã —Å–∫–∞–∑–∞–ª–∏: *{recognized_text}*", parse_mode='Markdown')
            process_command(recognized_text, chat_id)
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            show_main_menu(chat_id)

    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥–æ–ª–æ—Å–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        show_main_menu(chat_id)

@bot.message_handler(content_types=["text"])
def handle_text_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≥–æ–Ω—è—è –∏—Ö —á–µ—Ä–µ–∑ AI."""
    process_command(message.text, message.chat.id)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

    command = call.data
    
    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI, –∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    if command == "help":
        show_main_menu(chat_id, HELP)
    elif command == "show":
        tasks_string = get_tasks_string(tasks)
        bot.send_message(chat_id, tasks_string)
        show_main_menu(chat_id)
    elif command == "delete":
        clear_all_tasks(tasks)
        save_tasks(tasks)
        bot.send_message(chat_id, "üóëÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")
        show_main_menu(chat_id)
    elif command == "add":
        # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω—É–∂–µ–Ω –¥–∏–∞–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π AI –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ—Ç –≤–µ—Å—Ç–∏
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞'):")
        bot.register_next_step_handler(msg, lambda m: process_command(m.text, m.chat.id))

def show_main_menu(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≥–æ–ª–æ—Å–æ–º/—Ç–µ–∫—Å—Ç–æ–º:"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
    bot.send_message(chat_id, text, reply_markup=kb.create_main_menu_keyboard(), parse_mode='Markdown')

# --- –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def check_tasks_and_notify():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    global last_notification_date
    if ADMIN_ID == "YOUR_TELEGRAM_ID":
        print("–í–Ω–∏–º–∞–Ω–∏–µ: ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
        return

    today_moscow = datetime.now(MOSCOW_TZ).date()
    today_str = today_moscow.strftime('%Y-%m-%d')
    
    if today_moscow == last_notification_date:
        return # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è

    current_tasks = load_tasks()
    if today_str in current_tasks and current_tasks[today_str]:
        tasks_today = current_tasks[today_str]
        message = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∏:\n\n"
        for i, task in enumerate(tasks_today, 1):
            message += f"{i}. {task}\n"
        
        try:
            bot.send_message(ADMIN_ID, message)
            last_notification_date = today_moscow # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ {today_str} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    else:
        print(f"–ù–∞ {today_str} –Ω–µ—Ç –∑–∞–¥–∞—á, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    while True:
        now_moscow = datetime.now(MOSCOW_TZ)
        if now_moscow.hour >= 9:
            check_tasks_and_notify()
        time.sleep(3600) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
if __name__ == '__main__':
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    
    print("AI-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling(none_stop=True)