---
description: Правила проекта Chat Bot Netology - Telegram бот для управления задачами
globs: ["*.py", "*.json", "*.md", "*.txt"]
alwaysApply: true
---

# Правила проекта Chat Bot Netology

## Общие принципы
- Используй Python 3.9+
- Следуй стандартам PEP 8
- Добавляй подробные комментарии к коду
- Обрабатывай все возможные исключения
- Используй type hints для функций

## Структура проекта
```
chat-bot-netology/
├── main.py              # Основной файл бота с обработчиками
├── functions.py         # Вспомогательные функции для работы с задачами
├── keyboards.py         # Inline-клавиатуры для Telegram
├── tasks.json          # JSON файл для хранения задач
├── requirements.txt    # Зависимости проекта
├── .env               # Переменные окружения (токен бота)
└── docs/              # Документация агентов
```

## Стиль кода Python
- Используй snake_case для переменных и функций
- Используй UPPER_CASE для констант
- Добавляй docstrings к функциям
- Группируй импорты: стандартные, сторонние, локальные
- Максимальная длина строки: 88 символов

## Работа с Telegram Bot API
- Используй pyTelegramBotAPI (telebot)
- Все callback_query обрабатывай в одном обработчике
- Используй inline-клавиатуры для навигации
- Обрабатывай ошибки отправки сообщений
- Логируй важные события

## Обработка данных
- Используй JSON для хранения задач
- Валидируй все пользовательские вводы
- Используй регулярные выражения для парсинга дат
- Обрабатывай часовые пояса (Europe/Moscow)

## Безопасность
- Никогда не коммить токен бота в код
- Используй переменные окружения (.env файл)
- Валидируй права доступа пользователей
- Обрабатывай некорректные данные

## Форматирование сообщений
- Используй Markdown для форматирования
- Добавляй эмодзи для улучшения UX
- Структурируй длинные сообщения
- Используй parse_mode='Markdown'

## Планировщик и уведомления
- Используй threading для фоновых задач
- Проверяй время каждый час
- Отправляй уведомления только администратору
- Логируй работу планировщика

## Обработка ошибок
- Используй try-except блоки
- Логируй ошибки с подробностями
- Предоставляй понятные сообщения пользователю
- Не прерывай работу бота из-за ошибок

## Тестирование
- Тестируй все функции парсинга дат
- Проверяй работу с пустыми данными
- Тестируй обработку некорректного ввода
- Проверяй работу планировщика

## Документация
- Веди документацию в папке docs/
- Используй Markdown формат
- Описывай API и функции
- Веди changelog изменений

## Развертывание
- Используй виртуальное окружение (venv)
- Фиксируй версии зависимостей
- Настрой логирование для продакшена
- Используй переменные окружения для конфигурации

## Примеры кода
```python
# Хорошо
def add_todo(date: str, task: str, tasks: dict) -> None:
    """Добавляет задачу в словарь задач."""
    tasks.setdefault(date, []).append(task)

# Плохо
def add_todo(date, task, tasks):
    tasks[date] = tasks.get(date, []) + [task]
```

## Приоритеты при разработке
1. Безопасность и стабильность
2. Удобство использования
3. Производительность
4. Читаемость кода
5. Расширяемость
