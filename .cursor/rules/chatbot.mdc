---
description: "Архитектура проекта AI-ассистента в Telegram для управления задачами. Управление через обработку естественного языка."
globs: ["*.py", "*.json", "*.md", "*.txt"]
alwaysApply: true
projectType: "ai-telegram-bot"
---

# Архитектура проекта: AI-ассистент

## Ключевая идея
Проект переработан для управления через команды на естественном языке. Вместо кнопок используется AI-ядро для распознавания намерений пользователя (intent recognition) и вызова соответствующих функций. Бот поддерживает как управление задачами, так и свободный диалог.

## Структура проекта
```
chat-bot-netology/
├── main.py              # Основной файл: инициализация бота и единый обработчик сообщений
├── ai_core.py           # НОВОЕ: Ядро ИИ. Распознавание команд, вызов функций, генерация ответов
├── functions.py         # Бизнес-логика: функции для работы с задачами (CRUD)
├── openrouter_ai.py     # Интеграция с моделью ИИ (OpenRouter) для диалогов и анализа команд
├── ai_prompt.txt        # НОВЫЙ ПРОМПТ: Системный промпт для AI-ассистента (tool-use)
├── help.txt             # НОВОЕ: Справка для пользователя с описанием команд
├── tasks.json           # Файл для хранения задач
├── requirements.txt     # Зависимости проекта
├── .env                 # Переменные окружения (TELEGRAM_BOT_TOKEN, OPENROUTER_API_KEY)
└── .agents/                # Документация
```
**УДАЛЕНО:** `keyboards.py` больше не используется.
**ГОЛОС:** Голосовое управление не реализуется на данном этапе.

## Логика работы
1.  **`main.py`**:
    -   Запускает бота.
    -   Имеет **один** основной обработчик `message_handler`, который принимает любой текст от пользователя.
    -   Передает текст в `ai_core.py` для анализа.
    -   Реализует команду `/start` и `/help`, которая будет отправлять пользователю содержимое файла `help.txt`.

2.  **`ai_core.py`**:
    -   Получает текст от `main.py`.
    -   Загружает системный промпт из `ai_prompt.txt`.
    -   Обращается к `openrouter_ai.py` с промптом и текстом пользователя.
    -   **Анализ ответа модели**:
        -   Если модель вернула JSON с вызовом инструмента (`tool_call`), `ai_core` вызывает соответствующую функцию из `functions.py`.
        -   Если модель вернула обычный текст, `ai_core` передает его как ответ в диалоге.
    -   Возвращает готовый текстовый ответ в `main.py` для отправки пользователю.

3.  **`functions.py`**:
    -   Содержит неизменную логику для CRUD-операций с задачами в `tasks.json`.

## Команды для распознавания (через `ai_prompt.txt`)
- **Создание задачи**: "создай задачу", "новая задача", "запиши"
- **Просмотр задач**: "покажи список", "какие задачи", "список дел"
- **Удаление задачи**: "удали задачу", "убрать" (по номеру)
- **Полная очистка**: "удали все задачи" (с последующим подтверждением `да/нет`)